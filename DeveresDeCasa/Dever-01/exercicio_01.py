# -*- coding: utf-8 -*-
"""Exercicio_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BTqrm4kQDP5M67lpun7ayzLHE7S3FvrB
"""

# Importar os módulos do sistema operacional
import os
import locale

# Instalar pt_BR
!/usr/share/locales/install-language-pack pt_BR
!dpkg-reconfigure locales pt_BR

# Reiniciar o processo Python
os.kill(os.getpid(), 9)

# Definições e funções para todos os exemplos
# encoding: iso-8859-1

from datetime import datetime
import random



# Ajustando a localização para o Brasil
import os
import locale
locale.setlocale(locale.LC_ALL, 'pt_BR')
from datetime import datetime
import pytz

import pandas as pd

# Define o fuso horário para o Brasil (Brasília)
con_fuso_horario = pytz.timezone("America/Sao_Paulo")

conSeparador= "\nXXXXXXXXXXXXX---XXXXXXXXXXXXX\n"

# Função formatar tempo de execução (dado tempo de inicio e fim, retorna h:m:milisegundos formatado)
def formata_tempo_execucao (dttInicio, dttfim):
    strTempo = dttfim - dttInicio
    str_tempo_execucao_formatado = "{:02d}:{:02d}.{:06d}".format(
    strTempo.seconds // 60,  # Minutos
    strTempo.seconds % 60,  # Segundos
    strTempo.microseconds  # Microsegundos
    )
    return str_tempo_execucao_formatado

def formata_data(dttParametro):
  return dttParametro.strftime("%d/%m/%Y - %H:%M:%S.%f")

def formata_numero(numero):
    return locale.format_string("%d", numero, grouping=True)

# Cria um array do tamanho intElementosArray, valores inteiros entre intMin e intMax)
def montar_array (intElementosArray,intMin, intMax):
  x = 0
  array = []
  while x < intTamArray:
    intElementosArray = random.randint(intMin,intMax)
    array.append (intElementosArray)
    x += 1
  return (array)

def ler_inteiro (strMensagem):
  while True:
    try:      # Se nenhuma exceção ocorrer, a cláusula except é ignorada e a execução da instrução try é finalizada
      tamanho = int(input(strMensagem))
      break  # Se a entrada for válida, sai do loop e finaliza o programa
    except ValueError:
      print("Erro: Por favor, digite um número inteiro valido.")
  return tamanho


def carregar_array():
    arrMeuArray = []
    while True:
        entrada = input("Digite um número inteiro para o array (-1 para sair): ")
        try:
            numero = int(entrada)
        except ValueError:
            print("Por favor, digite um número inteiro válido.")
            continue
        if numero == -1:
            break
        arrMeuArray.append(numero)
        print (f"O array atual tem {str(len(arrMeuArray))}. Seu conteúdo é \n")
        print (arrMeuArray)
    return arrMeuArray

def marcar_inicio (strMensagem):
  dttInicio = datetime.now(con_fuso_horario)
  dttInicioFormatado = formata_data(dttInicio)
  print(f"Iniciando {strMensagem} as : " + str(dttInicioFormatado))
  return dttInicio

def marcar_fim (strMensagem):
  dttFim = datetime.now(con_fuso_horario)
  dttFimFormatado = formata_data (dttFim)
  print(f"Finalizando {strMensagem} as : " + str(dttFimFormatado))
  return dttFim

def ler_arquivo_csv_para_lista(nome_arquivo):
    try:
        dados = pd.read_csv(nome_arquivo)
        return dados.values.tolist()  # Converte o DataFrame para uma lista de listas
    except FileNotFoundError:
        print(f"Erro: Arquivo '{nome_arquivo}' não encontrado.")
        return None

# Código para criar o arquivo CSV
import csv

# Dados que serão escritos no arquivo CSV
# Código para criar o arquivo CSV
import csv

# Dados que serão escritos no arquivo CSV
dados = [
    ["nome", "dataNasc", "dataCadastro", "horaCadastro"],
    ["João Silva","03/23/1980","2023/05/12","08:15"],
    ["Maria Santos","08/23/1985","2022/08/23","12:30"],
    ["Pedro Oliveira","03/04/1999","2021/03/04","14:45"],
    ["Ana Souza","11/15/1988","2020/11/15","09:00"],
    ["Lucas Rodrigues","07/30/1993","2019/07/30","17:20"],
    ["Julia Ferreira","02/14/1987","2018/02/14","06:55"],
    ["Gabriel Alves","09/01/1995","2017/09/01","23:10"],
    ["Laura Pereira","04/22/1991","2016/04/22","10:25"],
    ["Mateus Lima","12/07/1984","2015/12/07","19:40"],
    ["Sofia Costa","06/18/1996","2014/06/18","03:05"]
]

# Escrever os dados no arquivo CSV
with open("Exercicio_01.csv", mode="w", newline="", encoding="utf-8") as arquivo:
  escritor = csv.writer(arquivo)
  escritor.writerows(dados)

print("Arquivo CSV criado com sucesso!")

# Código para ler o arquivo CSV
import csv

# Ler o arquivo CSV
with open("Exercicio_01.csv", mode="r", encoding="utf-8") as arquivo:
  leitor = csv.reader(arquivo)
  registros = list(leitor)

# Exibir os registros lidos
for registro in registros:
  print(registro)

# Código para ler o arquivo CSV e exibir o registro solicitado
import csv

# Ler o arquivo CSV
with open("Exercicio_01.csv", mode="r", encoding="utf-8") as arquivo:
    leitor = csv.reader(arquivo)
    registros = list(leitor)

# Solicitar o número do registro ao usuário
try:
  n = int(input("Digite o número do registro que deseja exibir (1 a 10): "))
  if n < 1 or n > 10:
    print("Número de registro inválido. Por favor, digite um número entre 1 e 10.")

  else:
    # Acessar o registro solicitado (subtraímos 1 porque a lista começa em 0)
    registro = registros[n]

     # Converter a data de nascimento para o padrão brasileiro (dd/mm/aaaa)
    dataNasc = registro[1].split("/")
    dataNascBr = f"{dataNasc[1]}/{dataNasc[0]}/{dataNasc[2]}"

    # Converter a data de cadastro para o padrão brasileiro (dd/mm/aaaa)
    data_Cadastro = registro[2].split("/")
    data_Cadastro_Br = f"{data_Cadastro[2]}/{data_Cadastro[1]}/{data_Cadastro[0]}"

    # Exibir o registro no formato solicitado
    print(f"Registro {n}: Nome: {registro[0]}, Data de Nascimento: {dataNascBr}, Data de Cadastro: {data_Cadastro_Br} às {registro[3]} horas")

except ValueError:
    print("Entrada inválida. Digite um número.")